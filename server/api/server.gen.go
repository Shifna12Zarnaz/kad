// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// AgentRequest defines model for AgentRequest.
type AgentRequest struct {
	CustomerId string `json:"customer_id"`
	Endpoint   string `json:"endpoint"`
}

// DeployPayload defines model for DeployPayload.
type DeployPayload struct {
	// Operation Operation
	Operation string `json:"operation"`

	// Payload payload
	Payload string `json:"payload"`

	// Plugin plugin
	Plugin string `json:"plugin"`

	// Workertype workertype
	Workertype string `json:"workertype"`
}

// PostDeployJSONRequestBody defines body for PostDeploy for application/json ContentType.
type PostDeployJSONRequestBody = DeployPayload

// PostRegisterAgentJSONRequestBody defines body for PostRegisterAgent for application/json ContentType.
type PostRegisterAgentJSONRequestBody = AgentRequest

// PutRegisterAgentJSONRequestBody defines body for PutRegisterAgent for application/json ContentType.
type PutRegisterAgentJSONRequestBody = AgentRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of APIs provided by the service
	// (GET /api-docs)
	GetApiDocs(c *gin.Context)
	// deploy the application
	// (POST /deploy)
	PostDeploy(c *gin.Context)
	// Register agent
	// (GET /register/agent)
	GetRegisterAgent(c *gin.Context)
	// Register agent
	// (POST /register/agent)
	PostRegisterAgent(c *gin.Context)
	// Register agent
	// (PUT /register/agent)
	PutRegisterAgent(c *gin.Context)
	// Kubernetes readiness and liveness probe endpoint
	// (GET /status)
	GetStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiDocs operation middleware
func (siw *ServerInterfaceWrapper) GetApiDocs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiDocs(c)
}

// PostDeploy operation middleware
func (siw *ServerInterfaceWrapper) PostDeploy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDeploy(c)
}

// GetRegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) GetRegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRegisterAgent(c)
}

// PostRegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) PostRegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRegisterAgent(c)
}

// PutRegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) PutRegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRegisterAgent(c)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api-docs", wrapper.GetApiDocs)

	router.POST(options.BaseURL+"/deploy", wrapper.PostDeploy)

	router.GET(options.BaseURL+"/register/agent", wrapper.GetRegisterAgent)

	router.POST(options.BaseURL+"/register/agent", wrapper.PostRegisterAgent)

	router.PUT(options.BaseURL+"/register/agent", wrapper.PutRegisterAgent)

	router.GET(options.BaseURL+"/status", wrapper.GetStatus)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTW/bOBD9K8TsHrWWt7npliJFEaRAgji3IihocqwwlUiGQ7owDP33gqT8oUiOkx57",
	"MzV8M++9GY63IExrjUbtCaotkHjClqeflzVqf48vAcnHs3XGovMKU1QE8qZF90PJePQbi1ABead0DV0B",
	"qKU1SvuJYFeAw5egHEqovg8yHeEeC/DKNxGYmDClV8a13CujodjlNMtnFD4WvELbmM0d3zSGyzHf+Dtj",
	"qy1IJOGUzUe43YeKsQ57SDhE7QJTmCbUaqJQ/30C8cu4n+jy59eoo1hxxkpzpGRfbIDfsT5yNxvHRnp2",
	"1sYi0fsxswXnC0bo1ujYrUXN7r8sHtjl3TUji0KtlNjb2tc6jVi8QqzRUa7y/2w+m0eTjEXNrYIKLmbz",
	"2UVS459Sd0tu1X/SiHSo0Q86fi2hgq/oL626ileiZ2SNpjwZn+bziZm4SeZSaFvuNlDBN0WemVXkSsw6",
	"s1YSJVtumH/CpEiJ1B9eU+yEDctGCXiMSUqZHE4zaWiC250hn7sAuZ9I/rORCSGM9pifEbe26Q0qnylP",
	"MmphZByFmPwwqj3qIXdyBEzS0kuPl/91uIIK/ikPq6Ds90A5fFVdlyfuw+5lB5JXR2RO+eWwVuTRlbzu",
	"pZ9q6X1/M22IE4094+DBB+WxpXOGDLZit38s3Dm+yW/ljBU7yoz3nEcWFG+MyVjwR6blfT0fSvzTlr9L",
	"Z5iSGf4qlXGgyXMf3txNi3zjPRwoCIFEq9Cww74fsroJS3QaPRJzyKXSSMS4lqxRa0wH68wS2f7P9oi3",
	"U2vuMRKPKdOqjoEtBNdABSV0j93vAAAA//+ULCxkNggAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
